{"version":3,"file":"static/js/586.b971a5d1.chunk.js","mappings":"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","sources":["hooks/queries/general/useGeneralQuery.ts","hooks/queries/general/index.ts","hooks/queries/custom/useYupValidationResolver.ts","webpack://my-app/./src/pages/MainForm/MainForm.module.scss?918f","webpack://my-app/./src/components/AntComponents/Input/Input.module.scss?33ef","components/AntComponents/Input/index.ts","components/AntComponents/Input/Input.tsx","webpack://my-app/./src/components/AntComponents/Select/Select.module.scss?c789","components/AntComponents/Select/index.ts","components/AntComponents/Select/Select.tsx","hooks/queries/general/useGeneralMutation.ts","pages/MainForm/index.ts","pages/MainForm/MainForm.tsx","services/api/index.ts"],"sourcesContent":["import { AxiosResponse } from \"axios\";\r\nimport { useQuery, UseQueryOptions } from \"@tanstack/react-query\";\r\nimport { request } from \"services/api\";\r\n\r\nconst useGeneralQuery = <Data = any>(\r\n  url: string,\r\n  params: object = {},\r\n  options: UseQueryOptions = {}\r\n) =>\r\n    useQuery({\r\n      queryKey: [url, params],\r\n      queryFn: () =>\r\n        request\r\n          .get<Data>(url, { params })\r\n          .then((response: AxiosResponse) => response),\r\n      ...options,\r\n    });\r\n\r\nexport default useGeneralQuery;\r\n","import useGeneralQuery from \"./useGeneralQuery\";\r\n\r\n\r\nconst useGetDocumentsQuery = () => useGeneralQuery(\"/api/v1/documents\");\r\n\r\nexport  {\r\n    useGetDocumentsQuery\r\n}","import {useCallback} from \"react\";\r\n\r\nconst useYupValidationResolver = (validationSchema: any) =>\r\n    useCallback(\r\n        async (data) => {\r\n            try {\r\n                const values = await validationSchema.validate(data, {\r\n                    abortEarly: false\r\n                });\r\n                return {\r\n                    values,\r\n                    errors: {}\r\n                };\r\n            } catch (errors: any) {\r\n                return {\r\n                    values: {},\r\n                    errors: errors?.inner?.reduce(\r\n                        (allErrors: any, currentError: any) => ({\r\n                            ...allErrors,\r\n                            [currentError.path]: {\r\n                                type: currentError.type ?? \"validation\",\r\n                                message: currentError.message\r\n                            }\r\n                        }),\r\n                        {}\r\n                    )\r\n                };\r\n            }\r\n        },\r\n        [validationSchema]\r\n    );\r\n\r\nexport default useYupValidationResolver;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form_page\":\"MainForm_form_page__KE8ev\",\"form_box\":\"MainForm_form_box__VpmiL\",\"form\":\"MainForm_form__Fmmh7\"};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Input_input__H5xrG\",\"label\":\"Input_label__S0pty\"};","import Input from \"./Input\";\r\nexport default Input;\r\n","import React from \"react\";\r\nimport {Input as AntInput, InputProps, Tag} from \"antd\";\r\nimport classes from \"./Input.module.scss\";\r\nimport cn from \"classnames\";\r\n\r\ntype Props = InputProps & {\r\n    label?: any;\r\n    className?: string;\r\n    size?: \"small\" | \"middle\" | \"large\";\r\n    errorMsg?: any;\r\n};\r\n\r\nconst Input = ({label, size = \"large\", className,errorMsg, ...props}: Props) => {\r\n    const classNames = cn(classes[\"input\"], className && className, errorMsg && \"ant-form-item-has-error\");\r\n    return (\r\n        <div className={classNames}>\r\n            <span className={classes[\"label\"]}>{label}</span>\r\n            <AntInput size={size} {...props} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"select\":\"Select_select__l-Wqe\",\"label\":\"Select_label__CkLjz\"};","import Select from \"./Select\";\r\nexport default Select;","import classes from \"./Select.module.scss\";\r\nimport { Select as AntSelect, SelectProps } from \"antd\";\r\nimport cn from \"classnames\";\r\n\r\ntype Props = SelectProps & {\r\n  label?: any;\r\n  fullWidth?: boolean;\r\n  size?: \"small\" | \"middle\" | \"large\";\r\n};\r\n\r\nconst Select = ({ label, size = \"large\", fullWidth, ...props }: Props) => {\r\n  const classNames = cn(classes[\"select\"], fullWidth && \"w100\");\r\n  return (\r\n    <div className={classNames}>\r\n      <span className={classes[\"label\"]}>{label}</span>\r\n      <AntSelect size={size} {...props} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import { useMutation, UseMutationOptions } from \"@tanstack/react-query\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { request } from \"services/api\";\r\n\r\nconst useApiMutation = <Variables = any, Response = any, Error = any>(\r\n  url: string,\r\n  method: \"post\" | \"get\" | \"put\" | \"patch\" | \"delete\",\r\n  options: UseMutationOptions<AxiosResponse<Response>, Error, Variables> = {}\r\n) =>\r\n    useMutation<AxiosResponse<Response>, Error, Variables>(\r\n      (variables) => {\r\n        const response = request({ method, url, data: variables });\r\n        return response;\r\n      },\r\n      { ...options }\r\n    );\r\n\r\nexport default useApiMutation;\r\n","import MainForm from \"./MainForm\";\r\n\r\nexport default MainForm;","import React, {useMemo} from 'react';\r\nimport {Controller, useFieldArray, useForm} from \"react-hook-form\";\r\n\r\nimport {object, string, array, number} from \"yup\";\r\nimport useYupValidationResolver from \"hooks/queries/custom/useYupValidationResolver\";\r\nimport classes from \"./MainForm.module.scss\";\r\nimport {Button, Checkbox, Col, Divider, Row} from \"antd\";\r\nimport {Input, Select} from \"../../components/AntComponents\";\r\nimport get from \"lodash/get\";\r\nimport {useGetDocumentsQuery} from \"hooks/queries/general\";\r\nimport useApiMutation from \"../../hooks/queries/general/useGeneralMutation\";\r\nimport {AxiosResponse, AxiosError} from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst MainForm = () => {\r\n    const getDocuments = useGetDocumentsQuery();\r\n    const documentsSaveMutation = useApiMutation(\"/api/v1/documents/create\", \"post\", {});\r\n    const navigate = useNavigate();\r\n\r\n    const validationSchema = useMemo(\r\n        () =>\r\n            object({\r\n                document_name: string().required(\"not empty\"),\r\n                form_values: array().of(\r\n                    object().shape({\r\n                        field_seq: string().required(\"not empty\"),\r\n                        is_mandatory: number().required(\"not empty\"),\r\n                        field_type: number(),\r\n                        field_name: string(),\r\n                    })\r\n                )\r\n\r\n            }),\r\n        []\r\n    );\r\n\r\n    const resolver = useYupValidationResolver(validationSchema);\r\n\r\n    const {\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        watch,\r\n        formState: {errors}\r\n    } = useForm<any>({\r\n        defaultValues: {\r\n            document_name: undefined,\r\n            form_values: [\r\n                {\r\n                    field_seq: undefined,\r\n                    is_mandatory: undefined,\r\n                    field_type: undefined,\r\n                    field_name: undefined,\r\n                    select_values: undefined,\r\n                    document_id: undefined\r\n                },\r\n\r\n            ]\r\n\r\n        },\r\n        resolver\r\n    });\r\n\r\n\r\n    const form_values = useFieldArray<any>({\r\n        name: \"form_values\",\r\n        control\r\n    });\r\n\r\n    const options = useMemo(() => {\r\n        const data = Array.isArray(get(getDocuments, \"data.data\", [])) ? get(getDocuments, \"data.data\", []) : [];\r\n        return data.map((item: any) => ({label: item.document_name, value: item.id}))\r\n    }, [getDocuments.isSuccess]);\r\n\r\n\r\n    const onSubmit = handleSubmit((values: any) => {\r\n        let payload = {\r\n            ...values,\r\n            form_values: get(values, \"form_values\", []).map((item: any) => {\r\n                return {\r\n                    field_seq: item.field_seq,\r\n                    is_mandatory: item.is_mandatory,\r\n                    field_type: item.field_type,\r\n                    field_name: item?.field_name ? item?.field_name : \"\",\r\n                    document_id: item?.document_id ? item?.document_id : undefined,\r\n                    select_values: item.select_values ? JSON.parse(item.select_values) : []\r\n                }\r\n            })\r\n        };\r\n        documentsSaveMutation.mutateAsync(payload).then((res: AxiosResponse) => {\r\n            navigate('/');\r\n        }).catch((error: AxiosError) => {\r\n            console.log(error)\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div className={classes.form_page}>\r\n\r\n            <div className={classes.form_box}>\r\n                <Row gutter={[20, 20]} justify={\"center\"}>\r\n                    <Col span={24}>\r\n                        <Controller\r\n                            name={`document_name`}\r\n                            control={control}\r\n                            render={({field, fieldState}) => (\r\n                                <Input\r\n                                    size={\"large\"}\r\n                                    label={\"Document title\"}\r\n                                    {...field}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                    <Divider style={{marginBottom: \"30px\", marginTop: \"15px\", borderTop: \"1px solid #364BA8\"}}/>\r\n                    {form_values.fields.map((field: any, index: number) => (\r\n                        <Row gutter={[20, 40]} className={classes.form} key={index}>\r\n                            <Col xs={24}>\r\n                                <Controller\r\n                                    name={`form_values.${index}.field_seq`}\r\n                                    control={control}\r\n                                    render={({field, fieldState}) => (\r\n                                        <Input\r\n                                            label={\"Field sequence (weight)\"}\r\n                                            type={\"number\"}\r\n                                            size={\"large\"}\r\n                                            errorMsg={get(errors, `form_values[${index}].field_seq`, {})}\r\n                                            {...field}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={24}>\r\n                                <Controller\r\n                                    name={`form_values.${index}.field_type`}\r\n                                    control={control}\r\n                                    render={({field: {value, onChange}, fieldState}) => (\r\n                                        <Select\r\n                                            label={\"Field type\"}\r\n                                            size={\"large\"}\r\n                                            {...field}\r\n                                            style={{width: \"100%\"}}\r\n                                            options={[\r\n                                                {label: \"Input\", value: 1},\r\n                                                {label: \"Select\", value: 2},\r\n                                                {label: \"NumberInput\", value: 3},\r\n                                            ]}\r\n                                            value={value}\r\n                                            onChange={(event: any) => {\r\n                                                onChange(event);\r\n                                                setValue(`form_values.${index}.select_values`, undefined);\r\n                                                setValue(`form_values.${index}.field_name`, undefined);\r\n                                                setValue(`form_values.${index}.document_id`, undefined);\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={24}>\r\n                                {watch(`form_values.${index}.field_type`) === 2 ? (\r\n                                    <Controller\r\n                                        name={`form_values.${index}.select_values`}\r\n                                        control={control}\r\n                                        render={({field, fieldState}) => (\r\n                                            <Input\r\n                                                label={\"Field name\"}\r\n                                                size={\"large\"}\r\n                                                {...field}\r\n                                                style={{width: \"100%\"}}\r\n\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                ) : (\r\n                                    <>\r\n                                        {watch(`form_values.${index}.field_type`) === 1 ? (\r\n                                            <Controller\r\n                                                name={`form_values.${index}.field_name`}\r\n                                                control={control}\r\n                                                render={({field, fieldState}) => (\r\n                                                    <Input\r\n                                                        label={\"Field name\"}\r\n                                                        type={\"number\"}\r\n                                                        size={\"large\"}\r\n                                                        errorMsg={get(errors, `form_values[${index}].field_name`, {})}\r\n                                                        {...field}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        ) : (\r\n                                            <Controller\r\n                                                name={`form_values.${index}.document_id`}\r\n                                                control={control}\r\n                                                render={({field, fieldState}) => (\r\n                                                    <Select\r\n                                                        label={\"Field name\"}\r\n                                                        size={\"large\"}\r\n                                                        {...field}\r\n                                                        style={{width: \"100%\"}}\r\n                                                        options={options}\r\n                                                        loading={getDocuments.isLoading}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n\r\n\r\n                            </Col>\r\n                            <Col xs={24}>\r\n                                <Controller\r\n                                    name={`form_values.${index}.is_mandatory`}\r\n                                    control={control}\r\n                                    render={({field: {value, onChange}, fieldState}) => (\r\n                                        <Checkbox\r\n                                            type={\"number\"}\r\n                                            checked={value === 1}\r\n                                            onClick={() => {\r\n                                                if (value === 1) {\r\n                                                    onChange(0)\r\n                                                } else {\r\n                                                    onChange(1)\r\n                                                }\r\n                                            }}\r\n                                        >&nbsp;Mandatory</Checkbox>\r\n                                    )}\r\n                                />\r\n                            </Col>\r\n                            <Divider style={{marginBottom: \"10px\", marginTop: \"0px\", borderTop: \"1px solid #364BA8\"}}/>\r\n                        </Row>\r\n                    ))}\r\n\r\n                    <Row style={{width: \"100%\"}} justify={\"space-between\"}>\r\n                        <Button onClick={() => form_values.append({})}>\r\n                            Add more\r\n                        </Button>\r\n                        <Button type={\"primary\"} onClick={onSubmit}>\r\n                            Save\r\n                        </Button>\r\n                    </Row>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainForm;","import axios from \"axios\";\r\n\r\nexport const request = axios.create({\r\n\tbaseURL: process.env.REACT_APP_URL\r\n});\r\n\r\nfunction generateInterceptor(request: any) {\r\n\trequest.interceptors.request.use(\r\n\t\tfunction (config: any) {\r\n\t\t\tconfig.headers[\"API-KEY\"] = \"secret-api-key\";\r\n\t\t\tconfig.headers[\"Accept-Encoding\"] = \"gzip,defiate,br\";\r\n\t\t\tconfig.headers[\"Connection\"] = \"keep-alive\";\r\n\t\t\treturn config;\r\n\t\t},\r\n\t\t(error: any) => Promise.reject(error)\r\n\t);\r\n\trequest.interceptors.response.use(\r\n\t\t(config: any) => config,\r\n\t\t(error: any) => {\r\n\t\t\tif (error?.response?.status === 401) {\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\t);\r\n}\r\n\r\ngenerateInterceptor(request);\r\n"],"names":["url","params","options","useQuery","queryKey","queryFn","request","then","response","useGetDocumentsQuery","useGeneralQuery","validationSchema","useCallback","data","validate","abortEarly","values","errors","inner","reduce","allErrors","currentError","path","type","message","label","size","className","errorMsg","props","classNames","cn","classes","fullWidth","method","useMutation","variables","getDocuments","documentsSaveMutation","useApiMutation","navigate","useNavigate","useMemo","object","document_name","string","required","form_values","array","of","shape","field_seq","is_mandatory","number","field_type","field_name","resolver","useYupValidationResolver","useForm","defaultValues","undefined","select_values","document_id","control","handleSubmit","setValue","watch","getValues","reset","formState","useFieldArray","name","Array","isArray","get","map","item","value","id","isSuccess","onSubmit","payload","JSON","parse","mutateAsync","res","catch","error","console","log","gutter","justify","span","render","field","fieldState","style","marginBottom","marginTop","borderTop","fields","index","xs","onChange","width","event","loading","isLoading","checked","onClick","append","axios","baseURL","process","interceptors","use","config","headers","Promise","reject","status","generateInterceptor"],"sourceRoot":""}